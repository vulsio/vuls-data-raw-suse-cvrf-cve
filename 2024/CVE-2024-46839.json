{
	"document_title": "CVE-2024-46839",
	"document_type": "SUSE CVE",
	"document_publisher": {
		"type": "Vendor",
		"contact_details": "security@suse.de",
		"issuing_authority": "SUSE Security Team"
	},
	"document_tracking": {
		"identification": {
			"id": "SUSE CVE-2024-46839"
		},
		"status": "Interim",
		"version": "1",
		"revision_history": {
			"revision": {
				"number": "2",
				"date": "2024-09-28T23:10:16Z",
				"description": "current"
			}
		},
		"initial_release_date": "2024-09-27T23:10:33Z",
		"current_release_date": "2024-09-28T23:10:16Z",
		"generator": {
			"engine": "cve-database/bin/generate-cvrf-cve.pl",
			"date": "2020-12-27T01:00:00Z"
		}
	},
	"document_notes": [
		{
			"text": "CVE-2024-46839",
			"title": "CVE",
			"type": "Summary"
		},
		{
			"text": "In the Linux kernel, the following vulnerability has been resolved:\n\nworkqueue: Improve scalability of workqueue watchdog touch\n\nOn a ~2000 CPU powerpc system, hard lockups have been observed in the\nworkqueue code when stop_machine runs (in this case due to CPU hotplug).\nThis is due to lots of CPUs spinning in multi_cpu_stop, calling\ntouch_nmi_watchdog() which ends up calling wq_watchdog_touch().\nwq_watchdog_touch() writes to the global variable wq_watchdog_touched,\nand that can find itself in the same cacheline as other important\nworkqueue data, which slows down operations to the point of lockups.\n\nIn the case of the following abridged trace, worker_pool_idr was in\nthe hot line, causing the lockups to always appear at idr_find.\n\n  watchdog: CPU 1125 self-detected hard LOCKUP @ idr_find\n  Call Trace:\n  get_work_pool\n  __queue_work\n  call_timer_fn\n  run_timer_softirq\n  __do_softirq\n  do_softirq_own_stack\n  irq_exit\n  timer_interrupt\n  decrementer_common_virt\n  * interrupt: 900 (timer) at multi_cpu_stop\n  multi_cpu_stop\n  cpu_stopper_thread\n  smpboot_thread_fn\n  kthread\n\nFix this by having wq_watchdog_touch() only write to the line if the\nlast time a touch was recorded exceeds 1/4 of the watchdog threshold.",
			"title": "Mitre CVE Description",
			"type": "Description"
		},
		{
			"text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
			"title": "Terms of Use",
			"type": "Legal Disclaimer"
		}
	],
	"document_references": [
		{
			"type": "Self",
			"url": "https://www.suse.com/support/security/rating/",
			"description": "SUSE Security Ratings"
		}
	],
	"product_tree": {},
	"vulnerability": [
		{
			"notes": [
				{
					"text": "In the Linux kernel, the following vulnerability has been resolved:\n\nworkqueue: Improve scalability of workqueue watchdog touch\n\nOn a ~2000 CPU powerpc system, hard lockups have been observed in the\nworkqueue code when stop_machine runs (in this case due to CPU hotplug).\nThis is due to lots of CPUs spinning in multi_cpu_stop, calling\ntouch_nmi_watchdog() which ends up calling wq_watchdog_touch().\nwq_watchdog_touch() writes to the global variable wq_watchdog_touched,\nand that can find itself in the same cacheline as other important\nworkqueue data, which slows down operations to the point of lockups.\n\nIn the case of the following abridged trace, worker_pool_idr was in\nthe hot line, causing the lockups to always appear at idr_find.\n\n  watchdog: CPU 1125 self-detected hard LOCKUP @ idr_find\n  Call Trace:\n  get_work_pool\n  __queue_work\n  call_timer_fn\n  run_timer_softirq\n  __do_softirq\n  do_softirq_own_stack\n  irq_exit\n  timer_interrupt\n  decrementer_common_virt\n  * interrupt: 900 (timer) at multi_cpu_stop\n  multi_cpu_stop\n  cpu_stopper_thread\n  smpboot_thread_fn\n  kthread\n\nFix this by having wq_watchdog_touch() only write to the line if the\nlast time a touch was recorded exceeds 1/4 of the watchdog threshold.",
					"title": "Vulnerability Description",
					"type": "General"
				}
			],
			"cve": "CVE-2024-46839",
			"threats": [
				{
					"type": "Impact",
					"description": "moderate"
				}
			],
			"cvss_score_sets": {
				"score_set_v_2": {},
				"score_set_v_3": {}
			}
		}
	]
}
