{
	"document_title": "CVE-2024-26878",
	"document_type": "SUSE CVE",
	"document_publisher": {
		"type": "Vendor",
		"contact_details": "security@suse.de",
		"issuing_authority": "SUSE Security Team"
	},
	"document_tracking": {
		"identification": {
			"id": "SUSE CVE-2024-26878"
		},
		"status": "Interim",
		"version": "1",
		"revision_history": {
			"revision": {
				"number": "1",
				"date": "2024-04-18T23:08:55Z",
				"description": "current"
			}
		},
		"initial_release_date": "2024-04-18T23:08:55Z",
		"current_release_date": "2024-04-18T23:08:55Z",
		"generator": {
			"engine": "cve-database/bin/generate-cvrf-cve.pl",
			"date": "2020-12-27T01:00:00Z"
		}
	},
	"document_notes": [
		{
			"text": "CVE-2024-26878",
			"title": "CVE",
			"type": "Summary"
		},
		{
			"text": "In the Linux kernel, the following vulnerability has been resolved:\n\nquota: Fix potential NULL pointer dereference\n\nBelow race may cause NULL pointer dereference\n\nP1\t\t\t\t\tP2\ndquot_free_inode\t\t\tquota_off\n\t\t\t\t\t  drop_dquot_ref\n\t\t\t\t\t   remove_dquot_ref\n\t\t\t\t\t   dquots = i_dquot(inode)\n  dquots = i_dquot(inode)\n  srcu_read_lock\n  dquots[cnt]) != NULL (1)\n\t\t\t\t\t     dquots[type] = NULL (2)\n  spin_lock(&dquots[cnt]->dq_dqb_lock) (3)\n   ....\n\nIf dquot_free_inode(or other routines) checks inode's quota pointers (1)\nbefore quota_off sets it to NULL(2) and use it (3) after that, NULL pointer\ndereference will be triggered.\n\nSo let's fix it by using a temporary pointer to avoid this issue.",
			"title": "Mitre CVE Description",
			"type": "Description"
		},
		{
			"text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
			"title": "Terms of Use",
			"type": "Legal Disclaimer"
		}
	],
	"document_references": [
		{
			"type": "Self",
			"url": "https://www.suse.com/support/security/rating/",
			"description": "SUSE Security Ratings"
		}
	],
	"product_tree": {},
	"vulnerability": [
		{
			"notes": [
				{
					"text": "In the Linux kernel, the following vulnerability has been resolved:\n\nquota: Fix potential NULL pointer dereference\n\nBelow race may cause NULL pointer dereference\n\nP1\t\t\t\t\tP2\ndquot_free_inode\t\t\tquota_off\n\t\t\t\t\t  drop_dquot_ref\n\t\t\t\t\t   remove_dquot_ref\n\t\t\t\t\t   dquots = i_dquot(inode)\n  dquots = i_dquot(inode)\n  srcu_read_lock\n  dquots[cnt]) != NULL (1)\n\t\t\t\t\t     dquots[type] = NULL (2)\n  spin_lock(&dquots[cnt]->dq_dqb_lock) (3)\n   ....\n\nIf dquot_free_inode(or other routines) checks inode's quota pointers (1)\nbefore quota_off sets it to NULL(2) and use it (3) after that, NULL pointer\ndereference will be triggered.\n\nSo let's fix it by using a temporary pointer to avoid this issue.",
					"title": "Vulnerability Description",
					"type": "General"
				}
			],
			"cve": "CVE-2024-26878",
			"threats": [
				{
					"type": "Impact",
					"description": "moderate"
				}
			],
			"cvss_score_sets": {
				"score_set_v_2": {},
				"score_set_v_3": {
					"base_score_v_3": "5.5",
					"vector_v_3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
				}
			}
		}
	]
}
