{
  "document_title": "CVE-2021-21401",
  "document_type": "SUSE CVE",
  "document_publisher": {
    "type": "Vendor",
    "contact_details": "security@suse.de",
    "issuing_authority": "SUSE Security Team"
  },
  "document_tracking": {
    "identification": {
      "id": "SUSE CVE-2021-21401"
    },
    "status": "Interim",
    "version": "1",
    "revision_history": {
      "revision": {
        "number": "2",
        "date": "2021-12-09T02:18:44Z",
        "description": "current"
      }
    },
    "initial_release_date": "2021-09-30T01:38:41Z",
    "current_release_date": "2021-12-09T02:18:44Z",
    "generator": {
      "engine": "cve-database/bin/generate-cvrf-cve.pl",
      "date": "2020-12-27T01:00:00Z"
    }
  },
  "document_notes": [
    {
      "text": "CVE-2021-21401",
      "title": "CVE",
      "type": "Summary"
    },
    {
      "text": "Nanopb is a small code-size Protocol Buffers implementation in ansi C. In Nanopb before versions 0.3.9.8 and 0.4.5, decoding a specifically formed message can cause invalid `free()` or `realloc()` calls if the message type contains an `oneof` field, and the `oneof` directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed. This has been fixed in versions 0.3.9.8 and 0.4.5. See referenced GitHub Security Advisory for more information including workarounds.",
      "title": "Mitre CVE Description",
      "type": "Description"
    },
    {
      "text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "title": "Terms of Use",
      "type": "Legal Disclaimer"
    }
  ],
  "document_references": [
    {
      "type": "Self",
      "url": "https://www.suse.com/support/security/rating/",
      "description": "SUSE Security Ratings"
    }
  ],
  "product_tree": {
    "branch": [
      {
        "type": "Product Family",
        "name": "openSUSE Tumbleweed",
        "branch": [
          {
            "type": "Product Name",
            "name": "openSUSE Tumbleweed",
            "full_product_name": {
              "text": "openSUSE Tumbleweed",
              "product_id": "openSUSE Tumbleweed",
              "cpe": "cpe:/o:opensuse:tumbleweed"
            }
          }
        ],
        "full_product_name": {}
      },
      {
        "type": "Product Version",
        "name": "libprotobuf-nanopb0-0.4.5-1.3",
        "full_product_name": {
          "text": "libprotobuf-nanopb0-0.4.5-1.3",
          "product_id": "libprotobuf-nanopb0-0.4.5-1.3"
        }
      },
      {
        "type": "Product Version",
        "name": "nanopb-devel-0.4.5-1.3",
        "full_product_name": {
          "text": "nanopb-devel-0.4.5-1.3",
          "product_id": "nanopb-devel-0.4.5-1.3"
        }
      },
      {
        "type": "Product Version",
        "name": "nanopb-source-0.4.5-1.3",
        "full_product_name": {
          "text": "nanopb-source-0.4.5-1.3",
          "product_id": "nanopb-source-0.4.5-1.3"
        }
      }
    ],
    "relationship": [
      {
        "product_reference": "libprotobuf-nanopb0-0.4.5-1.3",
        "relation_type": "Default Component Of",
        "relates_to_product_reference": "openSUSE Tumbleweed"
      },
      {
        "product_reference": "nanopb-devel-0.4.5-1.3",
        "relation_type": "Default Component Of",
        "relates_to_product_reference": "openSUSE Tumbleweed"
      },
      {
        "product_reference": "nanopb-source-0.4.5-1.3",
        "relation_type": "Default Component Of",
        "relates_to_product_reference": "openSUSE Tumbleweed"
      }
    ]
  },
  "vulnerability": {
    "notes": [
      {
        "text": "Nanopb is a small code-size Protocol Buffers implementation in ansi C. In Nanopb before versions 0.3.9.8 and 0.4.5, decoding a specifically formed message can cause invalid `free()` or `realloc()` calls if the message type contains an `oneof` field, and the `oneof` directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed. This has been fixed in versions 0.3.9.8 and 0.4.5. See referenced GitHub Security Advisory for more information including workarounds.",
        "title": "Vulnerability Description",
        "type": "General"
      }
    ],
    "cve": "CVE-2021-21401",
    "product_statuses": [
      {
        "type": "Fixed",
        "product_id": [
          "openSUSE Tumbleweed:libprotobuf-nanopb0-0.4.5-1.3",
          "openSUSE Tumbleweed:nanopb-devel-0.4.5-1.3",
          "openSUSE Tumbleweed:nanopb-source-0.4.5-1.3"
        ]
      }
    ],
    "threats": [
      {
        "type": "Impact",
        "description": "moderate"
      }
    ],
    "cvss_score_sets": {
      "score_set_v_2": {
        "base_score_v_2": "5.5",
        "vector_v_2": "AV:N/AC:L/Au:S/C:N/I:P/A:P"
      },
      "score_set_v_3": {
        "base_score_v_3": "7.1",
        "vector_v_3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:L"
      }
    }
  }
}
